"""
Exemplo Pr√°tico: Sistema de Cruzamento de Dados DISC x Sa√∫de Mental com IA
Mind-Bridge European Compliance Edition

Este exemplo demonstra como usar a API de an√°lise de IA para cruzar dados
entre perfis DISC e indicadores de sa√∫de mental, gerando insights personalizados.
"""

import requests
import json
from datetime import datetime
import os

# Configura√ß√£o da API
BASE_URL = "http://localhost:5000"
API_BASE = f"{BASE_URL}/api/v1"

class MindBridgeAIClient:
    """Cliente para interagir com a API de an√°lise de IA do Mind-Bridge"""
    
    def __init__(self, base_url: str = API_BASE):
        self.base_url = base_url
        self.session = requests.Session()
    
    def analyze_correlation(self, user_id: int, disc_results: dict, mental_health_results: dict, user_context: dict = None):
        """
        Executar an√°lise completa de correla√ß√£o DISC x Sa√∫de Mental
        
        Args:
            user_id: ID do usu√°rio
            disc_results: Resultados da avalia√ß√£o DISC
            mental_health_results: Resultados de sa√∫de mental (PHQ-9, GAD-7, Burnout)
            user_context: Contexto adicional do usu√°rio
        
        Returns:
            dict: An√°lise completa com insights e recomenda√ß√µes
        """
        endpoint = f"{self.base_url}/ai-analysis/correlate"
        
        payload = {
            "user_id": user_id,
            "disc_results": disc_results,
            "mental_health_results": mental_health_results,
            "user_context": user_context or {}
        }
        
        response = self.session.post(endpoint, json=payload)
        return response.json()
    
    def quick_insight(self, disc_style: str, mental_health_scores: dict):
        """
        Gerar insight r√°pido baseado em dados b√°sicos
        
        Args:
            disc_style: Estilo DISC prim√°rio (D, I, S, C)
            mental_health_scores: Scores b√°sicos de sa√∫de mental
        
        Returns:
            dict: Insight r√°pido e recomenda√ß√µes
        """
        endpoint = f"{self.base_url}/ai-analysis/quick-insight"
        
        payload = {
            "disc_style": disc_style,
            "mental_health_scores": mental_health_scores
        }
        
        response = self.session.post(endpoint, json=payload)
        return response.json()
    
    def risk_assessment(self, disc_results: dict, mental_health_results: dict):
        """
        Calcular avalia√ß√£o de risco
        
        Args:
            disc_results: Resultados DISC
            mental_health_results: Resultados de sa√∫de mental
        
        Returns:
            dict: Avalia√ß√£o detalhada de riscos
        """
        endpoint = f"{self.base_url}/ai-analysis/risk-assessment"
        
        payload = {
            "disc_results": disc_results,
            "mental_health_results": mental_health_results
        }
        
        response = self.session.post(endpoint, json=payload)
        return response.json()
    
    def get_analysis_history(self, user_id: int):
        """Obter hist√≥rico de an√°lises de um usu√°rio"""
        endpoint = f"{self.base_url}/ai-analysis/history/{user_id}"
        response = self.session.get(endpoint)
        return response.json()
    
    def get_statistics(self):
        """Obter estat√≠sticas gerais das an√°lises"""
        endpoint = f"{self.base_url}/ai-analysis/statistics"
        response = self.session.get(endpoint)
        return response.json()


def exemplo_analise_completa():
    """Exemplo de an√°lise completa de correla√ß√£o"""
    
    print("üß† EXEMPLO: An√°lise Completa de Correla√ß√£o DISC x Sa√∫de Mental")
    print("=" * 70)
    
    # Inicializar cliente
    client = MindBridgeAIClient()
    
    # Dados de exemplo - Perfil D com indicadores de burnout
    disc_results = {
        "primary_style": "D",
        "secondary_style": "C",
        "scores": {
            "D": 85,  # Muito alto
            "I": 25,  # Baixo
            "S": 15,  # Muito baixo
            "C": 70   # Alto
        },
        "intensity": "high",
        "flexibility_score": 35  # Baixa flexibilidade
    }
    
    mental_health_results = {
        "phq9_score": 12,      # Depress√£o moderada
        "gad7_score": 15,      # Ansiedade moderada-severa
        "burnout_score": 75,   # Burnout alto
        "stress_level": "high",
        "sleep_quality": "poor"
    }
    
    user_context = {
        "role": "CEO",
        "company_size": "startup",
        "work_hours_per_week": 70,
        "team_size": 15,
        "recent_changes": ["funding_round", "rapid_growth", "new_hires"]
    }
    
    # Executar an√°lise
    print("üìä Executando an√°lise de correla√ß√£o...")
    result = client.analyze_correlation(
        user_id=1,
        disc_results=disc_results,
        mental_health_results=mental_health_results,
        user_context=user_context
    )
    
    if result.get('success'):
        analysis = result['result']
        
        print(f"‚úÖ An√°lise conclu√≠da: {analysis['analysis_id']}")
        print(f"üéØ Perfil DISC: {analysis['disc_profile']}")
        print(f"üìà Score de Risco Geral: {analysis['risk_assessment']['overall_risk_score']:.1f}/100")
        print(f"‚ö†Ô∏è  N√≠vel de Risco: {analysis['risk_assessment']['risk_level']}")
        print(f"üë®‚Äç‚öïÔ∏è Supervis√£o Profissional: {'Sim' if analysis['professional_oversight_required'] else 'N√£o'}")
        print(f"üéØ Confian√ßa da An√°lise: {analysis['confidence_score']:.1f}/100")
        
        print("\nüîç INSIGHTS PRINCIPAIS:")
        correlation = analysis['correlation_analysis']
        if isinstance(correlation, dict):
            print(f"‚Ä¢ {correlation.get('correlation_summary', 'An√°lise detalhada dispon√≠vel')}")
        
        print("\nüí° RECOMENDA√á√ïES PERSONALIZADAS:")
        for i, rec in enumerate(analysis['personalized_recommendations'][:3], 1):
            print(f"{i}. {rec['title']} ({rec['priority']} prioridade)")
            print(f"   {rec['description']}")
        
        print(f"\nüìÖ Pr√≥ximo acompanhamento: {analysis['follow_up_schedule']['frequency']}")
        
    else:
        print(f"‚ùå Erro na an√°lise: {result.get('message', 'Erro desconhecido')}")


def exemplo_insight_rapido():
    """Exemplo de insight r√°pido"""
    
    print("\n‚ö° EXEMPLO: Insight R√°pido")
    print("=" * 40)
    
    client = MindBridgeAIClient()
    
    # Dados b√°sicos para insight r√°pido
    result = client.quick_insight(
        disc_style="I",
        mental_health_scores={
            "depression": 8,   # Leve
            "anxiety": 12,     # Moderada
            "burnout": 45      # Moderado
        }
    )
    
    if result.get('success'):
        insight = result['insight']
        
        print(f"üé≠ Perfil: {insight['disc_style']}")
        print(f"‚ö†Ô∏è  N√≠vel de Risco: {insight['risk_level']}")
        
        print("\nüîç Insights Chave:")
        for insight_text in insight['key_insights']:
            print(f"‚Ä¢ {insight_text}")
        
        print("\nüí° Recomenda√ß√µes R√°pidas:")
        for rec in insight['quick_recommendations']:
            print(f"‚Ä¢ {rec}")
        
        if insight['professional_consultation_recommended']:
            print("\nüë®‚Äç‚öïÔ∏è Recomenda-se consulta profissional")
    
    else:
        print(f"‚ùå Erro: {result.get('message', 'Erro desconhecido')}")


def exemplo_avaliacao_risco():
    """Exemplo de avalia√ß√£o de risco"""
    
    print("\nüéØ EXEMPLO: Avalia√ß√£o de Risco Detalhada")
    print("=" * 50)
    
    client = MindBridgeAIClient()
    
    # Dados para avalia√ß√£o de risco
    disc_results = {
        "primary_style": "C",
        "scores": {"D": 30, "I": 20, "S": 25, "C": 90}
    }
    
    mental_health_results = {
        "phq9_score": 16,    # Depress√£o moderada-severa
        "gad7_score": 18,    # Ansiedade severa
        "burnout_score": 60  # Burnout moderado-alto
    }
    
    result = client.risk_assessment(disc_results, mental_health_results)
    
    if result.get('success'):
        risk = result['risk_assessment']
        
        print(f"üìä Score Geral de Risco: {risk['overall_risk_score']:.1f}/100")
        print(f"üè∑Ô∏è  Categoria: {risk['risk_level']}")
        
        print("\nüìà Riscos Individuais:")
        for risk_type, score in risk['individual_risks'].items():
            print(f"‚Ä¢ {risk_type.replace('_', ' ').title()}: {score:.1f}/100")
        
        print(f"\nüî¨ Algoritmo: v{risk['algorithm_version']}")
        print(f"üìä Intervalo de Confian√ßa: {risk['confidence_interval']['confidence_level']*100}%")
    
    else:
        print(f"‚ùå Erro: {result.get('message', 'Erro desconhecido')}")


def exemplo_estatisticas():
    """Exemplo de estat√≠sticas gerais"""
    
    print("\nüìä EXEMPLO: Estat√≠sticas do Sistema")
    print("=" * 45)
    
    client = MindBridgeAIClient()
    
    result = client.get_statistics()
    
    if result.get('success'):
        stats = result['statistics']
        
        print(f"üìà Total de An√°lises: {stats['total_analyses']}")
        print(f"üë®‚Äç‚öïÔ∏è Supervis√£o Profissional: {stats['professional_oversight_percentage']:.1f}%")
        print(f"üéØ Confian√ßa M√©dia: {stats['average_confidence_score']}/100")
        
        print("\nüé≠ Distribui√ß√£o por Perfil DISC:")
        for profile, count in stats['disc_profile_distribution'].items():
            percentage = (count / stats['total_analyses'] * 100) if stats['total_analyses'] > 0 else 0
            print(f"‚Ä¢ {profile}: {count} ({percentage:.1f}%)")
    
    else:
        print(f"‚ùå Erro: {result.get('message', 'Erro desconhecido')}")


def exemplo_casos_uso_reais():
    """Exemplos de casos de uso reais"""
    
    print("\nüåü CASOS DE USO REAIS")
    print("=" * 30)
    
    casos = [
        {
            "titulo": "CEO Startup (Perfil D) - Burnout Alto",
            "disc": "D",
            "contexto": "L√≠der de startup em crescimento r√°pido",
            "riscos": ["Burnout por sobrecarga", "Ansiedade por press√£o"],
            "intervencoes": ["Delega√ß√£o eficaz", "Gest√£o de estresse", "Equil√≠brio vida-trabalho"]
        },
        {
            "titulo": "Gerente RH (Perfil I) - Depress√£o Leve",
            "disc": "I",
            "contexto": "Profissional de RH com alta demanda social",
            "riscos": ["Esgotamento emocional", "Depend√™ncia de aprova√ß√£o"],
            "intervencoes": ["Autovalida√ß√£o", "Limites saud√°veis", "Suporte emocional"]
        },
        {
            "titulo": "Analista Financeiro (Perfil C) - Ansiedade Alta",
            "disc": "C",
            "contexto": "Profissional detalhista com deadlines apertados",
            "riscos": ["Perfeccionismo paralisante", "Autocr√≠tica excessiva"],
            "intervencoes": ["Terapia cognitiva", "Mindfulness", "Gest√£o de expectativas"]
        },
        {
            "titulo": "Assistente Administrativo (Perfil S) - Estresse por Mudan√ßas",
            "disc": "S",
            "contexto": "Profissional est√°vel em ambiente de mudan√ßas",
            "riscos": ["Ansiedade por mudan√ßas", "Sobrecarga silenciosa"],
            "intervencoes": ["Adapta√ß√£o gradual", "Comunica√ß√£o assertiva", "Suporte na transi√ß√£o"]
        }
    ]
    
    for i, caso in enumerate(casos, 1):
        print(f"\n{i}. {caso['titulo']}")
        print(f"   Contexto: {caso['contexto']}")
        print(f"   Riscos: {', '.join(caso['riscos'])}")
        print(f"   Interven√ß√µes: {', '.join(caso['intervencoes'])}")


def main():
    """Executar todos os exemplos"""
    
    print("üöÄ MIND-BRIDGE AI ANALYSIS - EXEMPLOS PR√ÅTICOS")
    print("üî¨ Sistema de Cruzamento de Dados DISC x Sa√∫de Mental")
    print("üåç European Compliance Edition")
    print("=" * 80)
    
    try:
        # Verificar se a API est√° rodando
        response = requests.get(f"{BASE_URL}/api/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå API n√£o est√° rodando. Execute 'python src/main.py' primeiro.")
            return
        
        print("‚úÖ API est√° rodando e acess√≠vel")
        
        # Executar exemplos
        exemplo_analise_completa()
        exemplo_insight_rapido()
        exemplo_avaliacao_risco()
        exemplo_estatisticas()
        exemplo_casos_uso_reais()
        
        print("\n" + "=" * 80)
        print("üéâ EXEMPLOS CONCLU√çDOS COM SUCESSO!")
        print("üí° Este sistema representa um diferencial √∫nico no mercado:")
        print("   ‚Ä¢ Primeira plataforma a combinar DISC + Sa√∫de Mental com IA")
        print("   ‚Ä¢ An√°lise preditiva baseada em correla√ß√µes cient√≠ficas")
        print("   ‚Ä¢ Interven√ß√µes personalizadas por perfil comportamental")
        print("   ‚Ä¢ Conformidade total com GDPR e Lei de IA da UE")
        print("üöÄ Pronto para revolucionar o mercado europeu!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar √† API.")
        print("üí° Certifique-se de que a aplica√ß√£o est√° rodando em http://localhost:5000")
        print("   Execute: python src/main.py")
    
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")


if __name__ == "__main__":
    main()

